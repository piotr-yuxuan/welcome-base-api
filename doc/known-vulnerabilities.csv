DependencyName,DependencyPath,Description,License,Md5,Sha1,Identifiers,CPE,CVE,CWE,Vulnerability,Source,CVSSv2_Severity,CVSSv2_Score,CVSSv2,CVSSv3_BaseSeverity,CVSSv3_BaseScore,CVSSv3,CPE Confidence,Evidence Count,VendorProject,Product,Name,DateAdded,ShortDescription,RequiredAction,DueDate,Notes
commons-compress-1.22.jar,/home/runner/.m2/repository/org/apache/commons/commons-compress/1.22/commons-compress-1.22.jar,"Apache Commons Compress software defines an API for working with compression and archive formats.  These include: bzip2, gzip, pack200, lzma, xz, Snappy, traditional Unix Compress, DEFLATE, DEFLATE64, LZ4, Brotli, Zstandard and ar, cpio, jar, tar, zip, dump, 7z, arj.",https://www.apache.org/licenses/LICENSE-2.0.txt,f1e4db16fee4291212d91409313a8086,691a8b4e6cf4248c3bc72c8b719337d5cb7359fa,pkg:maven/org.apache.commons/commons-compress@1.22,cpe:2.3:a:apache:commons_compress:1.22:*:*:*:*:*:*:*,CVE-2023-42503,"CWE-400 Uncontrolled Resource Consumption, CWE-20 Improper Input Validation","Improper Input Validation, Uncontrolled Resource Consumption vulnerability in Apache Commons Compress in TAR parsing.This issue affects Apache Commons Compress: from 1.22 before 1.24.0.  Users are recommended to upgrade to version 1.24.0, which fixes the issue.  A third party can create a malformed TAR file by manipulating file modification times headers, which when parsed with Apache Commons Compress, will cause a denial of service issue via CPU consumption.  In version 1.22 of Apache Commons Compress, support was added for file modification times with higher precision (issue # COMPRESS-612 [1]). The format for the PAX extended headers carrying this data consists of two numbers separated by a period [2], indicating seconds and subsecond precision (for example “1647221103.5998539”). The impacted fields are “atime”, “ctime”, “mtime” and “LIBARCHIVE.creationtime”. No input validation is performed prior to the parsing of header values.  Parsing of these numbers uses the BigDecimal [3] class from the JDK which has a publicly known algorithmic complexity issue when doing operations on large numbers, causing denial of service (see issue # JDK-6560193 [4]). A third party can manipulate file time headers in a TAR file by placing a number with a very long fraction (300,000 digits) or a number with exponent notation (such as “9e9999999”) within a file modification time header, and the parsing of files with these headers will take hours instead of seconds, leading to a denial of service via exhaustion of CPU resources. This issue is similar to CVE-2012-2098 [5].  [1]:  https://issues.apache.org/jira/browse/COMPRESS-612  [2]:  https://pubs.opengroup.org/onlinepubs/9699919799/utilities/pax.html#tag_20_92_13_05  [3]:  https://docs.oracle.com/javase/8/docs/api/java/math/BigDecimal.html  [4]:  https://bugs.openjdk.org/browse/JDK-6560193  [5]:  https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-2098   Only applications using CompressorStreamFactory class (with auto-detection of file types), TarArchiveInputStream and TarFile classes to parse TAR files are impacted. Since this code was introduced in v1.22, only that version and later versions are impacted.",NVD,,,,MEDIUM,5.5,CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H,HIGH,106,,,,,,,,
guava-30.1.1-jre.jar,/home/runner/.m2/repository/com/google/guava/guava/30.1.1-jre/guava-30.1.1-jre.jar,"Guava is a suite of core and expanded libraries that include     utility classes, Google's collections, I/O classes, and     much more.",http://www.apache.org/licenses/LICENSE-2.0.txt,05374f163d0a4141db672fff9df95b12,87e0fd1df874ea3cbe577702fe6f17068b790fd8,pkg:maven/com.google.guava/guava@30.1.1-jre,cpe:2.3:a:google:guava:30.1.1:*:*:*:*:*:*:*,CVE-2023-2976,CWE-552 Files or Directories Accessible to External Parties,"Use of Java's default temporary directory for file creation in `FileBackedOutputStream` in Google Guava versions 1.0 to 31.1 on Unix systems and Android Ice Cream Sandwich allows other users and apps on the machine with access to the default Java temporary directory to be able to access the files created by the class.  Even though the security vulnerability is fixed in version 32.0.0, we recommend using version 32.0.1 as version 32.0.0 breaks some functionality under Windows.",NVD,,,,HIGH,7.1,CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:N,HIGH,22,,,,,,,,
guava-30.1.1-jre.jar,/home/runner/.m2/repository/com/google/guava/guava/30.1.1-jre/guava-30.1.1-jre.jar,"Guava is a suite of core and expanded libraries that include     utility classes, Google's collections, I/O classes, and     much more.",http://www.apache.org/licenses/LICENSE-2.0.txt,05374f163d0a4141db672fff9df95b12,87e0fd1df874ea3cbe577702fe6f17068b790fd8,pkg:maven/com.google.guava/guava@30.1.1-jre,cpe:2.3:a:google:guava:30.1.1:*:*:*:*:*:*:*,CVE-2020-8908,CWE-732 Incorrect Permission Assignment for Critical Resource,"A temp directory creation vulnerability exists in all versions of Guava, allowing an attacker with access to the machine to potentially access data in a temporary directory created by the Guava API com.google.common.io.Files.createTempDir(). By default, on unix-like systems, the created directory is world-readable (readable by an attacker with access to the system). The method in question has been marked @Deprecated in versions 30.0 and later and should not be used. For Android developers, we recommend choosing a temporary directory API provided by Android, such as context.getCacheDir(). For other Java developers, we recommend migrating to the Java 7 API java.nio.file.Files.createTempDirectory() which explicitly configures permissions of 700, or configuring the Java runtime's java.io.tmpdir system property to point to a location whose permissions are appropriately configured.",NVD,LOW,2.1,/AV:L/AC:L/Au:N/C:P/I:N/A:N,LOW,3.3,CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N,HIGH,22,,,,,,,,
jackson-databind-2.15.1.jar,/home/runner/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.15.1/jackson-databind-2.15.1.jar,General data-binding functionality for Jackson: works on core streaming API,"The Apache Software License, Version 2.0: https://www.apache.org/licenses/LICENSE-2.0.txt",02f4071cd666983bef73a25b9a1ad2d8,ac9ba74d208faf356e4719a49e59c6ea9237c01d,pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.15.1,"cpe:2.3:a:fasterxml:jackson-databind:2.15.1:*:*:*:*:*:*:*, cpe:2.3:a:fasterxml:jackson-modules-java8:2.15.1:*:*:*:*:*:*:*",CVE-2023-35116,CWE-770 Allocation of Resources Without Limits or Throttling,"** DISPUTED ** jackson-databind through 2.15.2 allows attackers to cause a denial of service or other unspecified impact via a crafted object that uses cyclic dependencies. NOTE: the vendor's perspective is that this is not a valid vulnerability report, because the steps of constructing a cyclic data structure and trying to serialize it cannot be achieved by an external attacker.",NVD,,,,MEDIUM,4.7,CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:N/I:N/A:H,HIGH,40,,,,,,,,
jetty-io-9.4.51.v20230217.jar,/home/runner/.m2/repository/org/eclipse/jetty/jetty-io/9.4.51.v20230217/jetty-io-9.4.51.v20230217.jar,Jetty module for Jetty :: IO Utility,"http://www.apache.org/licenses/LICENSE-2.0, https://www.eclipse.org/org/documents/epl-v10.php",f030b7fc7ff17b80aad37f8d79b9816d,a11a0713b17334a5b6e694602fbd1a9457cb5fdd,pkg:maven/org.eclipse.jetty/jetty-io@9.4.51.v20230217,"cpe:2.3:a:eclipse:jetty:9.4.51:20230217:*:*:*:*:*:*, cpe:2.3:a:jetty:jetty:9.4.51:20230217:*:*:*:*:*:*, cpe:2.3:a:mortbay_jetty:jetty:9.4.51:20230217:*:*:*:*:*:*",CVE-2023-40167,NVD-CWE-noinfo,"Jetty is a Java based web server and servlet engine. Prior to versions 9.4.52, 10.0.16, 11.0.16, and 12.0.1, Jetty accepts the `+` character proceeding the content-length value in a HTTP/1 header field.  This is more permissive than allowed by the RFC and other servers routinely reject such requests with 400 responses.  There is no known exploit scenario, but it is conceivable that request smuggling could result if jetty is used in combination with a server that does not close the connection after sending such a 400 response. Versions 9.4.52, 10.0.16, 11.0.16, and 12.0.1 contain a patch for this issue. There is no workaround as there is no known exploit scenario.",NVD,,,,MEDIUM,5.3,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N,HIGH,38,,,,,,,,
jetty-io-9.4.51.v20230217.jar,/home/runner/.m2/repository/org/eclipse/jetty/jetty-io/9.4.51.v20230217/jetty-io-9.4.51.v20230217.jar,Jetty module for Jetty :: IO Utility,"http://www.apache.org/licenses/LICENSE-2.0, https://www.eclipse.org/org/documents/epl-v10.php",f030b7fc7ff17b80aad37f8d79b9816d,a11a0713b17334a5b6e694602fbd1a9457cb5fdd,pkg:maven/org.eclipse.jetty/jetty-io@9.4.51.v20230217,"cpe:2.3:a:eclipse:jetty:9.4.51:20230217:*:*:*:*:*:*, cpe:2.3:a:jetty:jetty:9.4.51:20230217:*:*:*:*:*:*, cpe:2.3:a:mortbay_jetty:jetty:9.4.51:20230217:*:*:*:*:*:*",CVE-2023-36479,CWE-149 Improper Neutralization of Quoting Syntax,"Eclipse Jetty Canonical Repository is the canonical repository for the Jetty project. Users of the CgiServlet with a very specific command structure may have the wrong command executed. If a user sends a request to a org.eclipse.jetty.servlets.CGI Servlet for a binary with a space in its name, the servlet will escape the command by wrapping it in quotation marks. This wrapped command, plus an optional command prefix, will then be executed through a call to Runtime.exec. If the original binary name provided by the user contains a quotation mark followed by a space, the resulting command line will contain multiple tokens instead of one. This issue was patched in version 9.4.52, 10.0.16, 11.0.16 and 12.0.0-beta2.",NVD,,,,MEDIUM,4.3,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N,HIGH,38,,,,,,,,
jetty-io-9.4.51.v20230217.jar,/home/runner/.m2/repository/org/eclipse/jetty/jetty-io/9.4.51.v20230217/jetty-io-9.4.51.v20230217.jar,Jetty module for Jetty :: IO Utility,"http://www.apache.org/licenses/LICENSE-2.0, https://www.eclipse.org/org/documents/epl-v10.php",f030b7fc7ff17b80aad37f8d79b9816d,a11a0713b17334a5b6e694602fbd1a9457cb5fdd,pkg:maven/org.eclipse.jetty/jetty-io@9.4.51.v20230217,"cpe:2.3:a:eclipse:jetty:9.4.51:20230217:*:*:*:*:*:*, cpe:2.3:a:jetty:jetty:9.4.51:20230217:*:*:*:*:*:*, cpe:2.3:a:mortbay_jetty:jetty:9.4.51:20230217:*:*:*:*:*:*",CVE-2023-41900,CWE-1390 Weak Authentication,"Jetty is a Java based web server and servlet engine. Versions 9.4.21 through 9.4.51, 10.0.15, and 11.0.15 are vulnerable to weak authentication. If a Jetty `OpenIdAuthenticator` uses the optional nested `LoginService`, and that `LoginService` decides to revoke an already authenticated user, then the current request will still treat the user as authenticated. The authentication is then cleared from the session and subsequent requests will not be treated as authenticated. So a request on a previously authenticated session could be allowed to bypass authentication after it had been rejected by the `LoginService`. This impacts usages of the jetty-openid which have configured a nested `LoginService` and where that `LoginService` will is capable of rejecting previously authenticated users. Versions 9.4.52, 10.0.16, and 11.0.16 have a patch for this issue.",NVD,,,,MEDIUM,4.3,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N,HIGH,38,,,,,,,,
snakeyaml-1.32.jar,/home/runner/.m2/repository/org/yaml/snakeyaml/1.32/snakeyaml-1.32.jar,YAML 1.1 parser and emitter for Java,"Apache License, Version 2.0: http://www.apache.org/licenses/LICENSE-2.0.txt",d3dc8dfe8133804fde53eea7b2c45ac4,e80612549feb5c9191c498de628c1aa80693cf0b,pkg:maven/org.yaml/snakeyaml@1.32,cpe:2.3:a:snakeyaml_project:snakeyaml:1.32:*:*:*:*:*:*:*,CVE-2022-1471,CWE-502 Deserialization of Untrusted Data,SnakeYaml's Constructor() class does not restrict types which can be instantiated during deserialization. Deserializing yaml content provided by an attacker can lead to remote code execution. We recommend using SnakeYaml's SafeConsturctor when parsing untrusted content to restrict deserialization. We recommend upgrading to version 2.0 and beyond.,NVD,,,,CRITICAL,9.8,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,HIGH,39,,,,,,,,
snappy-java-1.1.8.4.jar,/home/runner/.m2/repository/org/xerial/snappy/snappy-java/1.1.8.4/snappy-java-1.1.8.4.jar,snappy-java: A fast compression/decompression library,Apache-2.0: https://www.apache.org/licenses/LICENSE-2.0.html,3aca6cae2cada8442809bc79be3df269,66f0d56454509f6e36175f2331572e250e04a6cc,pkg:maven/org.xerial.snappy/snappy-java@1.1.8.4,cpe:2.3:a:xerial:snappy-java:1.1.8.4:*:*:*:*:*:*:*,CVE-2023-34453,CWE-190 Integer Overflow or Wraparound,"snappy-java is a fast compressor/decompressor for Java. Due to unchecked multiplications, an integer overflow may occur in versions prior to 1.1.10.1, causing a fatal error.  The function `shuffle(int[] input)` in the file `BitShuffle.java` receives an array of integers and applies a bit shuffle on it. It does so by multiplying the length by 4 and passing it to the natively compiled shuffle function. Since the length is not tested, the multiplication by four can cause an integer overflow and become a smaller value than the true size, or even zero or negative. In the case of a negative value, a `java.lang.NegativeArraySizeException` exception will raise, which can crash the program. In a case of a value that is zero or too small, the code that afterwards references the shuffled array will assume a bigger size of the array, which might cause exceptions such as `java.lang.ArrayIndexOutOfBoundsException`.  The same issue exists also when using the `shuffle` functions that receive a double, float, long and short, each using a different multiplier that may cause the same issue.  Version 1.1.10.1 contains a patch for this vulnerability.",NVD,,,,HIGH,7.5,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,HIGH,48,,,,,,,,
snappy-java-1.1.8.4.jar,/home/runner/.m2/repository/org/xerial/snappy/snappy-java/1.1.8.4/snappy-java-1.1.8.4.jar,snappy-java: A fast compression/decompression library,Apache-2.0: https://www.apache.org/licenses/LICENSE-2.0.html,3aca6cae2cada8442809bc79be3df269,66f0d56454509f6e36175f2331572e250e04a6cc,pkg:maven/org.xerial.snappy/snappy-java@1.1.8.4,cpe:2.3:a:xerial:snappy-java:1.1.8.4:*:*:*:*:*:*:*,CVE-2023-34454,CWE-190 Integer Overflow or Wraparound,"snappy-java is a fast compressor/decompressor for Java. Due to unchecked multiplications, an integer overflow may occur in versions prior to 1.1.10.1, causing an unrecoverable fatal error.  The function `compress(char[] input)` in the file `Snappy.java` receives an array of characters and compresses it. It does so by multiplying the length by 2 and passing it to the rawCompress` function.  Since the length is not tested, the multiplication by two can cause an integer overflow and become negative. The rawCompress function then uses the received length and passes it to the natively compiled maxCompressedLength function, using the returned value to allocate a byte array.  Since the maxCompressedLength function treats the length as an unsigned integer, it doesn’t care that it is negative, and it returns a valid value, which is casted to a signed integer by the Java engine. If the result is negative, a `java.lang.NegativeArraySizeException` exception will be raised while trying to allocate the array `buf`. On the other side, if the result is positive, the `buf` array will successfully be allocated, but its size might be too small to use for the compression, causing a fatal Access Violation error.  The same issue exists also when using the `compress` functions that receive double, float, int, long and short, each using a different multiplier that may cause the same issue. The issue most likely won’t occur when using a byte array, since creating a byte array of size 0x80000000 (or any other negative value) is impossible in the first place.  Version 1.1.10.1 contains a patch for this issue.",NVD,,,,HIGH,7.5,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,HIGH,48,,,,,,,,
snappy-java-1.1.8.4.jar,/home/runner/.m2/repository/org/xerial/snappy/snappy-java/1.1.8.4/snappy-java-1.1.8.4.jar,snappy-java: A fast compression/decompression library,Apache-2.0: https://www.apache.org/licenses/LICENSE-2.0.html,3aca6cae2cada8442809bc79be3df269,66f0d56454509f6e36175f2331572e250e04a6cc,pkg:maven/org.xerial.snappy/snappy-java@1.1.8.4,cpe:2.3:a:xerial:snappy-java:1.1.8.4:*:*:*:*:*:*:*,CVE-2023-34455,CWE-770 Allocation of Resources Without Limits or Throttling,"snappy-java is a fast compressor/decompressor for Java. Due to use of an unchecked chunk length, an unrecoverable fatal error can occur in versions prior to 1.1.10.1.  The code in the function hasNextChunk in the fileSnappyInputStream.java checks if a given stream has more chunks to read. It does that by attempting to read 4 bytes. If it wasn’t possible to read the 4 bytes, the function returns false. Otherwise, if 4 bytes were available, the code treats them as the length of the next chunk.  In the case that the `compressed` variable is null, a byte array is allocated with the size given by the input data. Since the code doesn’t test the legality of the `chunkSize` variable, it is possible to pass a negative number (such as 0xFFFFFFFF which is -1), which will cause the code to raise a `java.lang.NegativeArraySizeException` exception. A worse case would happen when passing a huge positive value (such as 0x7FFFFFFF), which would raise the fatal `java.lang.OutOfMemoryError` error.  Version 1.1.10.1 contains a patch for this issue.",NVD,,,,HIGH,7.5,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,HIGH,48,,,,,,,,
telemetry-events-api-7.3.3-ce.jar,/home/runner/.m2/repository/io/confluent/telemetry-events-api/7.3.3-ce/telemetry-events-api-7.3.3-ce.jar,,,54792ac47ad9b1d025b68187d1f27f9a,81ceddb3241a4597cf682330e53c73d52c3fda44,pkg:maven/io.confluent/telemetry-events-api@7.3.3-ce,"cpe:2.3:a:apache:apache_http_server:7.3.3:*:*:*:*:*:*:*, cpe:2.3:a:apache:kafka:7.3.3:*:*:*:*:*:*:*",CVE-2010-1151,CWE-362 Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition'),"Race condition in the mod_auth_shadow module for the Apache HTTP Server allows remote attackers to bypass authentication, and read and possibly modify data, via vectors related to improper interaction with an external helper application for validation of credentials.",NVD,MEDIUM,6.8,/AV:N/AC:M/Au:N/C:P/I:P/A:P,,,,HIGH,25,,,,,,,,
