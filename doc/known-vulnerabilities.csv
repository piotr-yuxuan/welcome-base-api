DependencyName,DependencyPath,Description,License,Md5,Sha1,Identifiers,CPE,CVE,CWE,Vulnerability,Source,CVSSv2_Severity,CVSSv2_Score,CVSSv2,CVSSv3_BaseSeverity,CVSSv3_BaseScore,CVSSv3,CPE Confidence,Evidence Count,VendorProject,Product,Name,DateAdded,ShortDescription,RequiredAction,DueDate,Notes
commons-compress-1.22.jar,/home/runner/.m2/repository/org/apache/commons/commons-compress/1.22/commons-compress-1.22.jar,"Apache Commons Compress software defines an API for working with compression and archive formats.  These include: bzip2, gzip, pack200, lzma, xz, Snappy, traditional Unix Compress, DEFLATE, DEFLATE64, LZ4, Brotli, Zstandard and ar, cpio, jar, tar, zip, dump, 7z, arj.",https://www.apache.org/licenses/LICENSE-2.0.txt,f1e4db16fee4291212d91409313a8086,691a8b4e6cf4248c3bc72c8b719337d5cb7359fa,pkg:maven/org.apache.commons/commons-compress@1.22,cpe:2.3:a:apache:commons_compress:1.22:*:*:*:*:*:*:*,CVE-2023-42503,"CWE-400 Uncontrolled Resource Consumption, CWE-20 Improper Input Validation, NVD-CWE-noinfo","Improper Input Validation, Uncontrolled Resource Consumption vulnerability in Apache Commons Compress in TAR parsing.This issue affects Apache Commons Compress:��from 1.22 before 1.24.0.  Users are recommended to upgrade to version 1.24.0, which fixes the issue.  A third party can create a malformed TAR file by manipulating file modification times headers, which when parsed with Apache Commons Compress, will cause a denial of service issue via CPU consumption.  In version 1.22 of Apache Commons Compress, support was added for file modification times with higher precision (issue # COMPRESS-612 [1]). The format for the PAX extended headers carrying this data consists of two numbers separated by a period [2], indicating seconds and subsecond precision (for example ���1647221103.5998539���). The impacted fields are ���atime���, ���ctime���, ���mtime��� and ���LIBARCHIVE.creationtime���. No input validation is performed prior to the parsing of header values.  Parsing of these numbers uses the BigDecimal [3] class from the JDK which has a publicly known algorithmic complexity issue when doing operations on large numbers, causing denial of service (see issue # JDK-6560193 [4]). A third party can manipulate file time headers in a TAR file by placing a number with a very long fraction (300,000 digits) or a number with exponent notation (such as ���9e9999999���) within a file modification time header, and the parsing of files with these headers will take hours instead of seconds, leading to a denial of service via exhaustion of CPU resources. This issue is similar to CVE-2012-2098 [5].  [1]:  https://issues.apache.org/jira/browse/COMPRESS-612  [2]:  https://pubs.opengroup.org/onlinepubs/9699919799/utilities/pax.html#tag_20_92_13_05  [3]:  https://docs.oracle.com/javase/8/docs/api/java/math/BigDecimal.html  [4]:  https://bugs.openjdk.org/browse/JDK-6560193  [5]:  https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-2098   Only applications using CompressorStreamFactory class (with auto-detection of file types), TarArchiveInputStream and TarFile classes to parse TAR files are impacted. Since this code was introduced in v1.22, only that version and later versions are impacted.",NVD,,,,MEDIUM,5.5,CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H/E:1.8/RC:R/MAV:A,HIGH,106,,,,,,,,
commons-compress-1.22.jar,/home/runner/.m2/repository/org/apache/commons/commons-compress/1.22/commons-compress-1.22.jar,"Apache Commons Compress software defines an API for working with compression and archive formats.  These include: bzip2, gzip, pack200, lzma, xz, Snappy, traditional Unix Compress, DEFLATE, DEFLATE64, LZ4, Brotli, Zstandard and ar, cpio, jar, tar, zip, dump, 7z, arj.",https://www.apache.org/licenses/LICENSE-2.0.txt,f1e4db16fee4291212d91409313a8086,691a8b4e6cf4248c3bc72c8b719337d5cb7359fa,pkg:maven/org.apache.commons/commons-compress@1.22,cpe:2.3:a:apache:commons_compress:1.22:*:*:*:*:*:*:*,CVE-2024-25710,CWE-835 Loop with Unreachable Exit Condition ('Infinite Loop'),Loop with Unreachable Exit Condition ('Infinite Loop') vulnerability in Apache Commons Compress.This issue affects Apache Commons Compress: from 1.3 through 1.25.0.  Users are recommended to upgrade to version 1.26.0 which fixes the issue.,NVD,,,,MEDIUM,5.5,CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H/E:1.8/RC:R/MAV:A,HIGH,106,,,,,,,,
commons-compress-1.22.jar,/home/runner/.m2/repository/org/apache/commons/commons-compress/1.22/commons-compress-1.22.jar,"Apache Commons Compress software defines an API for working with compression and archive formats.  These include: bzip2, gzip, pack200, lzma, xz, Snappy, traditional Unix Compress, DEFLATE, DEFLATE64, LZ4, Brotli, Zstandard and ar, cpio, jar, tar, zip, dump, 7z, arj.",https://www.apache.org/licenses/LICENSE-2.0.txt,f1e4db16fee4291212d91409313a8086,691a8b4e6cf4248c3bc72c8b719337d5cb7359fa,pkg:maven/org.apache.commons/commons-compress@1.22,cpe:2.3:a:apache:commons_compress:1.22:*:*:*:*:*:*:*,CVE-2024-26308,CWE-770 Allocation of Resources Without Limits or Throttling,"Allocation of Resources Without Limits or Throttling vulnerability in Apache Commons Compress.This issue affects Apache Commons Compress: from 1.21 before 1.26.  Users are recommended to upgrade to version 1.26, which fixes the issue.",NVD,,,,MEDIUM,5.5,CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H/E:1.8/RC:R/MAV:A,HIGH,106,,,,,,,,
guava-30.1.1-jre.jar,/home/runner/.m2/repository/com/google/guava/guava/30.1.1-jre/guava-30.1.1-jre.jar,"Guava is a suite of core and expanded libraries that include     utility classes, Google's collections, I/O classes, and     much more.",http://www.apache.org/licenses/LICENSE-2.0.txt,05374f163d0a4141db672fff9df95b12,87e0fd1df874ea3cbe577702fe6f17068b790fd8,pkg:maven/com.google.guava/guava@30.1.1-jre,cpe:2.3:a:google:guava:30.1.1:*:*:*:*:*:*:*,CVE-2023-2976,CWE-552 Files or Directories Accessible to External Parties,"Use of Java's default temporary directory for file creation in `FileBackedOutputStream` in Google Guava versions 1.0 to 31.1 on Unix systems and Android Ice Cream Sandwich allows other users and apps on the machine with access to the default Java temporary directory to be able to access the files created by the class.  Even though the security vulnerability is fixed in version 32.0.0, we recommend using version 32.0.1 as version 32.0.0 breaks some functionality under Windows.",NVD,,,,HIGH,7.1,CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:N/E:1.8/RC:R/MAV:A,HIGH,22,,,,,,,,
guava-30.1.1-jre.jar,/home/runner/.m2/repository/com/google/guava/guava/30.1.1-jre/guava-30.1.1-jre.jar,"Guava is a suite of core and expanded libraries that include     utility classes, Google's collections, I/O classes, and     much more.",http://www.apache.org/licenses/LICENSE-2.0.txt,05374f163d0a4141db672fff9df95b12,87e0fd1df874ea3cbe577702fe6f17068b790fd8,pkg:maven/com.google.guava/guava@30.1.1-jre,cpe:2.3:a:google:guava:30.1.1:*:*:*:*:*:*:*,CVE-2020-8908,"CWE-378 Creation of Temporary File With Insecure Permissions, CWE-732 Incorrect Permission Assignment for Critical Resource","A temp directory creation vulnerability exists in all versions of Guava, allowing an attacker with access to the machine to potentially access data in a temporary directory created by the Guava API com.google.common.io.Files.createTempDir(). By default, on unix-like systems, the created directory is world-readable (readable by an attacker with access to the system). The method in question has been marked @Deprecated in versions 30.0 and later and should not be used. For Android developers, we recommend choosing a temporary directory API provided by Android, such as context.getCacheDir(). For other Java developers, we recommend migrating to the Java 7 API java.nio.file.Files.createTempDirectory() which explicitly configures permissions of 700, or configuring the Java runtime's java.io.tmpdir system property to point to a location whose permissions are appropriately configured.",NVD,LOW,2.1,/AV:L/AC:L/Au:N/C:P/I:N/A:N,LOW,3.3,CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N/E:1.8/RC:R/MAV:A,HIGH,22,,,,,,,,
snakeyaml-1.32.jar,/home/runner/.m2/repository/org/yaml/snakeyaml/1.32/snakeyaml-1.32.jar,YAML 1.1 parser and emitter for Java,"Apache License, Version 2.0: http://www.apache.org/licenses/LICENSE-2.0.txt",d3dc8dfe8133804fde53eea7b2c45ac4,e80612549feb5c9191c498de628c1aa80693cf0b,pkg:maven/org.yaml/snakeyaml@1.32,cpe:2.3:a:snakeyaml_project:snakeyaml:1.32:*:*:*:*:*:*:*,CVE-2022-1471,"CWE-502 Deserialization of Untrusted Data, CWE-20 Improper Input Validation",SnakeYaml's Constructor() class does not restrict types which can be instantiated during deserialization.��Deserializing yaml content provided by an attacker can lead to remote code execution. We recommend using SnakeYaml's SafeConsturctor when parsing untrusted content to restrict deserialization. We recommend upgrading to version 2.0 and beyond.,NVD,,,,CRITICAL,9.8,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H/E:3.9/RC:R/MAV:A,HIGH,39,,,,,,,,
snappy-0.4.jar,/home/runner/.m2/repository/org/iq80/snappy/snappy/0.4/snappy-0.4.jar,Port of Snappy to Java,Apache License 2.0: http://www.apache.org/licenses/LICENSE-2.0.html,f0792d1dbe7f90d8b34c7c19961e0073,a42b2d92a89efd35bb14738000dabcac6bd07a8d,pkg:maven/org.iq80.snappy/snappy@0.4,,CVE-2024-36124,CWE-125 Out-of-bounds Read,"iq80 Snappy is a compression/decompression library. When uncompressing certain data, Snappy tries to read outside the bounds of the given byte arrays. Because Snappy uses the JDK class `sun.misc.Unsafe` to speed up memory access, no additional bounds checks are performed and this has similar security consequences as out-of-bounds access in C or C++, namely it can lead to non-deterministic behavior or crash the JVM. iq80 Snappy is not actively maintained anymore. As quick fix users can upgrade to version 0.5.",OSSINDEX,,,,MEDIUM,5.300000190734863,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L,HIGH,31,,,,,,,,
telemetry-events-api-7.6.1-ce.jar,/home/runner/.m2/repository/io/confluent/telemetry-events-api/7.6.1-ce/telemetry-events-api-7.6.1-ce.jar,,,85dfff4d33d6f71a00a044e3d9c67269,992a76dd2920b71693bfeca60ca19666baa2a1e5,pkg:maven/io.confluent/telemetry-events-api@7.6.1-ce,"cpe:2.3:a:apache:apache_http_server:7.6.1:*:*:*:*:*:*:*, cpe:2.3:a:apache:kafka:7.6.1:*:*:*:*:*:*:*",CVE-2010-1151,CWE-362 Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition'),"Race condition in the mod_auth_shadow module for the Apache HTTP Server allows remote attackers to bypass authentication, and read and possibly modify data, via vectors related to improper interaction with an external helper application for validation of credentials.",NVD,MEDIUM,6.8,/AV:N/AC:M/Au:N/C:P/I:P/A:P,,,,HIGH,25,,,,,,,,
