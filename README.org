#+TITLE:welcome-base-api

Common idioms, tools, and code structures that I would use to build an
API. I intend to present them here in some canonical way so that I can
reflect on them, update them, change them according to feedback, and
use them as copy paste whenever I need them ðŸ™‚.

Actual code that I would write in a professional setting would not be
that way; it would favour team consensus over my own opinions.

I couldn't use ~git~ without ~magit.el~ or take notes without
~org-mode.el~. I learnt Clojure and ClojureScript and Emacs
(EmacsLive) at the same time but it's been a while know that I
switched to IntelliJ.

* Content                                                         :TOC_4:QUOTE:
#+BEGIN_QUOTE
- [[#clojure-luminaries-and-resources][Clojure luminaries and resources]]
- [[#local-tools][Local tools]]
- [[#opinionated-features][Opinionated features]]
  - [[#project-tooling][Project tooling]]
  - [[#three-pillars-of-observability][Three pillars of observability]]
  - [[#structured-logging][Structured logging]]
  - [[#log][Log]]
  - [[#monitoring][Monitoring]]
  - [[#trace][Trace]]
  - [[#distributed-tracing][Distributed tracing]]
  - [[#github-actions][GitHub Actions]]
  - [[#openapi][OpenAPI]]
  - [[#code-formatter][Code formatter]]
  - [[#rename][Rename]]
  - [[#github-pr-template][GitHub PR template]]
  - [[#authorization-authentication][Authorization, authentication]]
  - [[#error-handling-and-short-circuit][Error handling and short-circuit]]
  - [[#kafka-and-avro][Kafka and Avro]]
  - [[#reload-dev-workflow][Reload dev workflow]]
  - [[#data-shapes-and-schemas][Data shapes and schemas]]
  - [[#mutation-testing][Mutation testing]]
  - [[#report-licenses][Report licenses]]
  - [[#routing-library][Routing library]]
  - [[#state-management][State management]]
  - [[#list-known-dependency-vulnerabilities][List known dependency vulnerabilities]]
  - [[#sort-ns-forms][Sort ns forms]]
  - [[#report-test-coverage][Report test coverage]]
  - [[#api-documentation][API documentation]]
- [[#usage][Usage]]
- [[#new-idea][New idea]]
  - [[#principles][Principles]]
  - [[#how-to-live-in-production][How to live in production?]]
  - [[#infrastructure][Infrastructure]]
  - [[#server-side][Server side]]
    - [[#circuit-breaker][Circuit breaker]]
    - [[#logs][Logs]]
    - [[#distributed-tracing-1][Distributed tracing]]
    - [[#metrics][Metrics]]
    - [[#monitoring-1][Monitoring]]
    - [[#alerting][Alerting]]
    - [[#performance-testing][Performance testing]]
    - [[#short-term-mitigation-tools][Short-term mitigation tools]]
  - [[#client-side][Client side]]
  - [[#anti-patterns-i-will-not-condone][Anti-patterns I will not condone]]
- [[#example-api][Example API]]
  - [[#questions-and-features][Questions and features]]
  - [[#entities-and-actions][Entities and actions]]
    - [[#local-definitions][Local definitions]]
#+END_QUOTE

* Clojure luminaries and resources

I couldn't recommend them enough. This is not a complete list.

- Talks from Clojure author: https://github.com/tallesl/Rich-Hickey-fanclub
- Alex Miller, https://github.com/puredanger
- Arne Brasseur, https://github.com/plexus
- Bozhidar Batsov, https://github.com/bbatsov
- Bruce Hauman, https://github.com/bhauman
- Bruno Bonacci, https://github.com/BrunoBonacci
- Christophe Grand, https://github.com/cgrand
- Daniel Compton, https://github.com/danielcompton
- David Nolen, https://github.com/swannodette
- James Reeves, https://github.com/weavejester
- JÃ©rÃ©mie Grodziski, https://github.com/jgrodziski
- Michael Drogalis, https://github.com/MichaelDrogalis
- Michiel Borkent, https://github.com/borkdude  
- Peter Taoussanis, https://github.com/ptaoussanis
- Radon Rosborough, https://github.com/raxod502
- Tommi Reiman, https://github.com/ikitommi
- Tony Kay, https://github.com/awkay
- Valentin Waeselynck, https://github.com/vvvvalvalval
- Zach Tellman, https://github.com/ztellman

Heuristic: /any/ content reachable four or five clicks away from these
guys is most likely brilliant. See also:

- https://clojure.org/
- https://clojuredocs.org/, reference docs and examples
- http://clojurewerkz.org/
- https://guide.clojure.style/, Clean (Clojure) Code
- https://insideclojure.org/, thoughts from a Clojure maintainer
- https://lambdaisland.com/
- https://metaredux.com/
- https://practicalli.github.io/
- https://www.braveclojure.com/
  
* Local tools

- Getting started: https://clojure.org/guides/getting_started
- ~deps.edn~ guide: https://clojure.org/guides/deps_and_cli
- ~deps.edn~ reference: https://clojure.org/reference/deps_and_cli
- Tools and how-to guides: https://practicalli.github.io/clojure/
  
See also:

- Managing secrets and configuration:
  https://cljdoc.org/d/com.brunobonacci/oneconfig/
- Docker desktop: https://www.docker.com/products/docker-desktop
- MacOS packages: ~avro-tools~, ~git~
- Kafka CLI tools: https://docs.confluent.io/confluent-cli/current/index.html

* Opinionated features

Just a work in progress as of now, so no code yet.

** Project tooling

I have no strong opinion on any option here, but I see a couple of
nice things I see between ~deps.edn~ and Leiningen:

- The tooling around Leiningen is robust, proven, and effective. The
  tooling based on ~deps.edn~ is efflorescent and impressive.
- The resolution algorithm of ~deps.edn~ favours recent libraries,
  whereas Leiningen uses maven under the hood, which can causes some
  surprises.
- ~deps.edn~ don't run its own JVM.

** Three pillars of observability

** Structured logging

https://github.com/BrunoBonacci/mulog

Let's see how to get the most of it.

** Log

https://github.com/ptaoussanis/timbre

** Monitoring

https://github.com/gnarroway/fumi

Should come up with Prometheus in docker-compose file and thorough
examples of how to monitor things.

** Trace

** Distributed tracing

** GitHub Actions

When a PR is open against the main branch, would be great to have code
quality report. Also, automated tests could be added.

** OpenAPI

Would be great, but rather beta as of now

https://github.com/lispyclouds/navi

** Code formatter

https://github.com/greglook/cljstyle

** Rename

Rename to piotr-yuxuan/data-api, so that same codebase is shipped in
three different ways:

- Library
- Web API

** GitHub PR template

** Authorization, authentication

https://github.com/ovotech/ring-jwt and just a simple namespace

** Error handling and short-circuit

Just reitit ring exception middlewares, yet again a hidden gem

https://github.com/BrunoBonacci/safely

** Kafka and Avro

- No jackdaw, just https://github.com/athos/power-dot and Java classes
- https://github.com/piotr-yuxuan/slava to be rewritten with malli and
  better interactions with inner Serde. Composable?
- https://github.com/piotr-yuxuan/dove to be rewritten for malli

** Reload dev workflow

https://github.com/PrestanceDesign/get-port/tree/main/src/prestancedesign

** Data shapes and schemas

https://github.com/metosin/malli

** Mutation testing

** Report licenses

** Routing library

https://cljdoc.org/d/metosin/reitit/

** State management

No clear way yet, but:

- No https://github.com/weavejester/integrant?
- ~CloseableMap~ with ~potemkin/def-map-type~?
- https://github.com/jarohen/with-open?

** List known dependency vulnerabilities
 
** Sort ns forms

** Report test coverage

** API documentation

- Redoc
- Swagger
- Descriptive HTTP response status codes
- State machines, web sequence diagrams
- Postman collection ready for import, https://github.com/postmanlabs/openapi-to-postman
- Just pure human description with semantic zoom
- https://openapi.tools/ 

* Usage

This project was created with:

#+BEGIN_SRC zsh
cd ~/src/github.com/piotr-yuxuan
clojure -X:project/new :template app :name piotr-yuxuan/welcome-base-api
#+END_SRC

You can clone it with:

#+BEGIN_SRC zsh
git clone https://github.com/piotr-yuxuan/welcome-base-api ~/src/github.com/piotr-yuxuan/welcome-base-api
#+END_SRC

Run the project directly, via `:exec-fn`:

#+BEGIN_SRC zsh
clojure -X:run-x
#+END_SRC

Run the project, overriding the name to be greeted:

#+BEGIN_SRC zsh
clojure -X:run-x :name '"Someone"'
#+END_SRC

Run the project directly, via `:main-opts` (`-m piotr-yuxuan.welcome-base-api`):

#+BEGIN_SRC zsh
clojure -M:run-m
#+END_SRC

Run the project, overriding the name to be greeted:

#+BEGIN_SRC zsh
clojure -M:run-m Via-Main
#+END_SRC

Run the project's tests (they'll fail until you edit them):

#+BEGIN_SRC zsh
clojure -M:test:runner
#+END_SRC

Build an uberjar:

#+BEGIN_SRC zsh
clojure -X:uberjar
#+END_SRC

This will update the generated `pom.xml` file to keep the dependencies
synchronized with your `deps.edn` file. You can update the version
information in the `pom.xml` using the `:version` argument:

#+BEGIN_SRC zsh
clojure -X:uberjar :version '"1.2.3"'
#+END_SRC

If you don't want the `pom.xml` file in your project, you can remove
it, but you will also need to remove `:sync-pom true` from the
`deps.edn` file (in the `:exec-args` for `depstar`).

Run that uberjar:

#+BEGIN_SRC zsh
java -jar welcome-base-api.jar
#+END_SRC

* New idea

My goal is not to show yet another template for quick and easy Clojure
apps or ClojureScript webapps. There are a lot of them around, most of
them are really good, and they usually focus on the quickest path from
ideation to proof of concept as fast as possible, with some
opinionated set of libraries, tools, code style, and conventions.

This repository isn't intended as proscriptive guidance to help you
quickly reach a proof of concept. On the contrary the intended
audience is my future self, in some time, once I have got a project up
and running and I intend to release it in production.

** Principles

- No abstraction is better than bad abstraction ([[https://sandimetz.com/blog/2016/1/20/the-wrong-abstraction][Sandi Metz]]);
- Maximum composability over maximalist framework ([[https://en.wikipedia.org/wiki/Composition_over_inheritance][link]]);
- Minimal idiosyncrasy, be a good citizen, follow standards;
- Plans are useless, but planning is indispensable (Eisenhower).

** How to live in production?

https://pragprog.com/titles/mnee2/release-it-second-edition/

This humble goal of this repository is to be examplified checklist to
read before going live, much like an airplane captain always checks
safety, sanity, and security before risking his life and those of his
passengers.

The system you're building doesn't need to be the best. It can't be
perfect unless you have unlimited time and budget. It just has to be
good enough.

You made the flight plan with your POC, now how do you actually fly it
and get ready for the unexpected? If you are working on a live system
designed to be used by thousands of concurrent users you can't sanely
go to production without observability. You want to be able to observe
your system, prove it worked as intended, understand higher-order
effects, and prevent undesirable behaviours.

** Infrastructure

- Simple, one-click deployment and rollback procedures.
- Any need for A/B testing, and replaying browser logs + server
  requests to local instances?
- Logs http requests. That would allow us to replay any faulty event
  sequence and troubleshoot bugs much more easily.

** Server side

*** Circuit breaker

- Integrate safely?
- Circuit breaker and degraded mode. Perhaps itâ€™s better to explain to
  the user that data source scraping is unavailable but he still has
  read-only access to historical data, instead of having 100 %
  features or nothing.

*** Logs

- console logs + GitHub - BrunoBonacci/mulog + ELK Stack?
- Instance logs send to ELK with full-text search?
- Logging security event and permission changes

*** Distributed tracing

- Zipkin?
- If using other internal systems, distributed tracing would be nice
  to help collaborative debugging with different teams.

*** Metrics

- Basic JVM metrics
- Basic instance and disk metrics
- IO network pressure

*** Monitoring

- Grafana + Prometheus?
- http status codes as seen by the load balancer and the instances, as
  a whole and broken down by endpoints
- Latency histograms from the load balancer and the instances, as a
  whole and broken down by endpoints
- Request load seen by the load balancer and the instances, as a whole
  and broken down by endpoints
- Response time and availability of dependant services (DB, data
  sources)

*** Alerting

Make sure the system stays in nominal usage scenario, forecast issues,
and spot unexpected spikes.

- Prometheus?
- Â« Given the rate of the past 48h, the disks will be full in 3 days Â»
- Unexpected CPU load or disk activity Â« instance is on fire Â»
- Unexpected number of requests
- Unexpected number of users
- Unexpected activity for a user
- Error http status codes keep appearing for more than 2m.

*** Performance testing

- https://github.com/giltene/wrk2
- https://gatling.io/
- jamm
- Methodically everything from http://clojure-goes-fast.com/blog/

*** Short-term mitigation tools

- Being able to throttle or deny requests by endpoint / user / IP
  range might be quite helpful

** Client side

Recording the sessions and sending logs from browser to ELK would be
ideal. That would enable us to early detect customer issues and get in
touch with them before bugs report it for extra credibility. That
would also enable us to replay any faulty event sequences locally to
troubleshot bugs.

** Anti-patterns I will not condone

- Changing DB migrations in the past.
- Easier to pass no arguments to DB-related functions.
- Stupid in-house tooling for bad code abstractions that look quicker
  to write at first.
- Custom quotes in docstring to appear like mixing json and edn with
  no quote escape.
- mount is so thick and had so much complexity where all you want is
  a map and a bunch of functions.
- Aligning values is stupid and brings nothing.
- Do not use string, human-friendly labels as technical
  identifiers. As they are technical identifiers, do not rely on them
  for UI ordering. And please don't do both at all.
- Also, why not using http verbs post and patch for template creation
  and edition? it's unnecessary complication, i want to abstract the
  transport (HTTP particular) from any business logic
- Namespace db only contains things only related to the db. It is a
  namespace, not an object. If you want to write a request about an
  entity, do it in the proper namespace, not in db.
- Name your technical tool with technical names. Nobody knows what
  rocket-spoon, automatic-elk, or css-brasserie are for. Marketing
  names are great for marketing purposes, products, or business
  wording.
- Don't give different meaning to nil and absent value. Also, they
  should both mean the same thing: absence of value and nothing else.
- When possible don't use "all", for example in a filter. If you want
  to filter things but allow all possible values, it just means you
  don't need to filter anything, so don't fill this field.
- Don't conflate http request/response schemas with DB entity schemas,
  but derive the former from the latter when possible.
 
* Example API

- Simplified marketplace.
- Think about https://prebid.org/product-suite/prebid-js/ but with
  much simpler traded symbols.
- Some auctions are private, and reported at the end of the day, while
  some others are public and always observable.
- The bid process favours the second-highest bid price (this may vary,
  depending on the auction)
- Use xtdb to model the local time, and time of knowledge, and allow
  historical data (as-of time, and know)

** Questions and features

In order to give some meat to this project, a three-fold improvement
circle is applied:

- Build a simple simulation of stock exchanges;
- Derive metadata such as metrics, indicators, and signals;
- Use these metadata to inform trade strategies.

Disclaimer: my financial vocabulary is still very naive. But still, it
should allow to express some nice problems to solve :-)

- System features:
  - Horizontally scalable, and manage up to 20 years worth
    of data with no issues
  - Allow time travel
  - Be reasonably fast and efficient, but not necessary hard real time
    for analytics
  - Exposes robust, secure, well-documented RESTful API that is
    enjoyable to use and unsurprising.
- [[https://www.investopedia.com/articles/active-trading/041814/four-most-commonlyused-indicators-trend-trading.asp][Indicators to compute]]:
  - [[https://en.wikipedia.org/wiki/CAC_40][CAC40 index]]
  - Moving averages (pre-defined at first, and then any sliding windows)
  - Exponential moving average (emphasis put on recent prices)
  - Detect trading range (a more or less narrow price range in which
    a security trades for some time)
  - Buy and sell signals (relative position of 200-day and 50-day
    moving averages)
  - [[https://en.wikipedia.org/wiki/Volatility_(finance)][Volatility]]
  - Client sentiment (the proportion selling or buying)
- Query features:
  - Historical, Godlike value, knowing everything anyywhere
  - As with the knowledge of some specific trader as of some (consume)
    time

** Entities and actions

- An [[https://en.wikipedia.org/wiki/Exchange_(organized_market)][exchange]] is an organized market where securities are bought and
  sold.
- An [[https://en.wikipedia.org/wiki/Order_matching_system][order matcher]] executes orders, it's the core of the exchange.
- A [[https://en.wikipedia.org/wiki/Security_(finance)][security]] is a tradable financial asset.
- The [[https://en.wikipedia.org/wiki/Spot_market][spot market]] is exchanges in which securities are traded for
  immediate delivery, not as options.
- [[https://en.wikipedia.org/wiki/Market_capitalization][Market capitalisation]] is the total value of outstanding shares
- Accounts
- Dividends
- A [[https://www.londonstockexchange.com/help/whats-ftse-index-overview#what-is-ticker-][ticker]]
- https://blog.kaiko.com/tick-level-order-books-technical-overview-and-documentation-56b1ab6e7c10
  
*** Local definitions

- Companies are listed on some exchanges
- Companies issues shares and distribute dividends
- An exchange gets fees on listing and transactions
- An exchange can suspend listing of a company share if the sell / buy
  ratio becomes too imbalanced
- Traders buy or sell shares, and get fees for that
- Shareholders receive dividends from the company
